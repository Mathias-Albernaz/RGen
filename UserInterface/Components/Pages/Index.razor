@page "/"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Dominio
@using QuestPDF.Fluent
@using UserInterface.Components.Shared
@inject ItemRepo ItemRepo
@inject IDialogService DialogService

<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudText Typo="Typo.h2" Align="Align.Center">Nuevo Recibo</MudText>
<MudContainer MaxWidth="MaxWidth.Small">
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>
        <MudCard>
            <MudCardContent>
                <MudTextField MaxLength="50" Label="Titulo*" HelperText="Max. 50 characters"
                              @bind-Value="model.Titulo" For="@(() => model.Titulo)" />
                <MudTextField MaxLength="2" Label="Autor*" HelperText="Iniciales" Class="mt-3"
                              @bind-Value="model.Autor" For="@(() => model.Autor)"/>
                <MudTextField Label="Destinatario*" Class="mt-3"
                              @bind-Value="model.Destinatario" For="@(() => model.Destinatario)"/>
                <div style="height: 30px"></div>
                <MudDatePicker @bind-Date="model.Fecha" Label="Fecha de entrega*"/>
                <MudTextField Label="Observaciones" HelperText="Opcional" Class="mt-3"
                              @bind-Value="model.Observacion" For="@(() => model.Observacion)"/>
            </MudCardContent>
        </MudCard>
        <MudDivider DividerType="DividerType.Middle" Class="my-8"/>
        <MudText Typo="Typo.h5" Align="Align.Center">Elementos</MudText>
        <MudSimpleTable Dense="false" FixedHeader="true" Style="@(true ? "height:200px;" : "")" Striped="true" Outlined="true">
            <thead>
            <tr>
                @foreach (var h in headings)
                {
                    <th>@h</th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (var row in _items)
            {
                <tr>
                    @foreach (var x in row.ToString().Split(","))
                    {
                        <td>@x</td>
                    }
                </tr>
            }
            </tbody>
        </MudSimpleTable>
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" Class="ml-auto" @onclick="OpenDialogAsync">Agregar Item</MudButton>

        <MudDivider DividerType="DividerType.Middle" Class="my-1"/>
        @if (!completado)
        {
            <MudContainer Style="display: flex; justify-content: center">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
            </MudContainer>
        }
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Size="Size.Medium" FullWidth="true">Crear</MudButton>
        </MudCardActions>
    </EditForm>
</MudContainer>


@code {
    List<Item> _items;
    Datos _datos;
    Form model = new Form();
    bool success;
    bool completado;
    Recibo _recibo;

    string[] headings = { "Cantidad" ,"Descripcion", "Identificador" };
    
    
    
    protected override void OnInitialized()
    {
        completado = true;
        _items = ItemRepo.Listar();
        _datos = new Datos();
        model.Fecha = DateTime.Today;
        StateHasChanged();
    }

    public class Form
    {
        [Required]
        [StringLength(50)]
        public string Titulo { get; set; }

        [Required]
        [StringLength(2)]
        public string Autor { get; set; }

        [Required]
        public string Destinatario { get; set; }

        [Required] 
        public DateTime? Fecha { get; set; }
        
        public string Observacion { get; set; }
        
    }

    private async void OnValidSubmit(EditContext context)
    {
        completado = false;
        _datos.Titulo = model.Titulo;
        _datos.Autor = model.Autor.ToLower();
        _datos.Destinatario = model.Destinatario;
        _datos.Fecha = model.Fecha;
        _datos.Observacion = model.Observacion;
        
        success = true;
        _recibo = new Recibo(_items, _datos);
        _recibo.CrearRecibo();
        await Task.Delay(5000);
        completado = true;
        StateHasChanged();
    }
    
    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<FormDialog>("Agregar Elemento", options);
        var result = await dialog.Result;
    
        if (!result.Cancelled)
        {
            StateHasChanged();
        }
        
        
    }
    

}